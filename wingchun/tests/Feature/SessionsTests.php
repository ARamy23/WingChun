<?php

namespace Tests\Feature;

use App\Exceptions\CancelSessionInSameDayException;
use App\Exceptions\NoMoreSlotsToBookException;
use App\Exceptions\SurpassedAllowedExcusesException;
use App\Http\Controllers\Booker;
use App\Models\Day;
use App\Models\Session;
use App\Models\User;
use App\Models\Week;
use Carbon\Carbon;
use Database\Seeders\WeekWithSevenDays;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Spatie\TestTime\TestTime;
use Tests\TestCase;

class SessionsTests extends TestCase
{
    use WithFaker, RefreshDatabase;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate:fresh --seed');
    }

    public function testSessionsAreSeededSoThatThereAreThreeEverydayExceptOnOffDays()
    {

        // Week is created
        $this->assertDatabaseCount('weeks', 1);
        // Week has 7 days
        $this->assertDatabaseCount('days', 7);
        // Each day has 3 sessions except for off-day
        $this->assertDatabaseCount('sessions', 3 * 6);

        $week = Week::find(1);
        $day = Day::find(2);
        $offDay = Day::where('is_off_day', '=', true)->firstOrFail();
        $session = Session::find(1);

        $this->assertTrue($week->days->count() == 7);

        $this->assertTrue($day->sessions->count() == 3);
        $this->assertTrue($offDay->sessions->isEmpty());

        $this->assertTrue($session->attendees->isEmpty());
    }

    public function testUsersCanBookAnySessionAsLongAsItDidntExceedTheInitialLimit() {
        // Create User
        $firstAttendee = User::factory()->create();
        // Get 1st Session
        $firstWorkingDay = Day::find(2);
        $firstSession = $firstWorkingDay->sessions->first();
        // Make User book a session
        Booker::book($firstSession, $firstAttendee);
        $firstSession->refresh();
        // Assert that the session is booked by the user
        self::assertTrue($firstSession->attendees->contains($firstAttendee));
        // Create 5 Users
        $batchOfAttendees = User::factory()->count(5)->create();
        // Make them Book the session
        $batchOfAttendees->each(function ($attendee) use ($firstSession) {
            Booker::book($firstSession, $attendee);
        });
        // Create another user
        $lateStudent = User::factory()->create();
        // Make the user Book the session & assert that user got an error
        $this->expectException(NoMoreSlotsToBookException::class);
        Booker::book($firstSession, $lateStudent);
    }

    public function testUserCanCancelASessionAsLongAsTheSessionIsNoTakingPlaceInTheSameDay() {
        // Create a User
        $attendee = User::factory()->create();
        $workingDay = Day::find(4);
        $secondSession = $workingDay->sessions[1];
        $attendee->refresh();
        // Book a session
        Booker::book($secondSession, $attendee);
        // Cancel this session
        Booker::cancel($secondSession, $attendee);
        // Get another session
        $sessionInToday = $workingDay->sessions->first();
        // Change the session's from_time into today
        $sessionInToday->from_time = Carbon::parse('tomorrow 6pm');
        // Book that session
        Booker::book($sessionInToday, $attendee);
        TestTime::addDay();
        // Cancel it
        $this->expectException(CancelSessionInSameDayException::class);
        Booker::cancel($sessionInToday, $attendee);
    }

    public function testUserCanCancelAsLongAsHeHasExcusesOrItsCancelledInTheSameDay()
    {
        $this->artisan('migrate:fresh --seed');
        // Create a User
        $attendee = User::factory()->create();
        $workingDay = Day::all()->last();
        $session = $workingDay->sessions->first();
        $attendee->refresh();
        $originalAllowedExcuses = $attendee->allowed_excuses;
        // Book a session
        Booker::book($session, $attendee);
        // Cancel the session in the same day
        Booker::cancel($session, $attendee);
        $attendee->refresh();
        // Assert That Excuses count didn't get incremented
        self::assertTrue($attendee->excuses_count > 0);
        // Assert That Allowed Excuses didn't get decremented
        self::assertFalse($attendee->allowed_excuses < $originalAllowedExcuses);
        // Book another session
        Booker::book($session, $attendee);
        // Simulate that a day has passed
        TestTime::addDay();
        // Cancel this session
        Booker::cancel($session, $attendee);
        // Update User
        $attendee->refresh();
        // assert that excuses count went up by one
        $this->assertTrue($attendee->excuses_count > 1);
        // Assert That Allowed Excuses got decremented
        self::assertTrue($attendee->allowed_excuses < $originalAllowedExcuses);
        $firstAllowedExcusesDecremental = $attendee->allowed_excuses;
        // Book another session
        Booker::book($session, $attendee);
        // Simulate that a day has passed
        TestTime::addDay();
        // Cancel this session
        Booker::cancel($session, $attendee);
        // Update User
        $attendee->refresh();
        // assert that excuses count went up by one
        $this->assertTrue($attendee->excuses_count > 2);
        // Assert That Allowed Excuses got decremented
        self::assertTrue($attendee->allowed_excuses < $firstAllowedExcusesDecremental);
        // Book another session
        Booker::book($session, $attendee);
        // Simulate that a day has passed
        TestTime::addDay();
        // Cancel this session && expect SurpassedAllowedExcusesException
        $this->expectException(SurpassedAllowedExcusesException::class);
        Booker::cancel($session, $attendee);
    }
}
